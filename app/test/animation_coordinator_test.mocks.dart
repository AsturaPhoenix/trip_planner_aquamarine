// Mocks generated by Mockito 5.4.0 from annotations
// in trip_planner_aquamarine/test/animation_coordinator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/src/scheduler/ticker.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTickerFuture_0 extends _i1.SmartFake implements _i2.TickerFuture {
  _FakeTickerFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDiagnosticsNode_1 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [Ticker].
///
/// See the documentation for Mockito's code generation for more information.
class MockTicker extends _i1.Mock implements _i2.Ticker {
  @override
  bool get muted => (super.noSuchMethod(
        Invocation.getter(#muted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set muted(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #muted,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isTicking => (super.noSuchMethod(
        Invocation.getter(#isTicking),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get scheduled => (super.noSuchMethod(
        Invocation.getter(#scheduled),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get shouldScheduleTick => (super.noSuchMethod(
        Invocation.getter(#shouldScheduleTick),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.TickerFuture start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _FakeTickerFuture_0(
          this,
          Invocation.method(
            #start,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeTickerFuture_0(
          this,
          Invocation.method(
            #start,
            [],
          ),
        ),
      ) as _i2.TickerFuture);
  @override
  _i3.DiagnosticsNode describeForError(String? name) => (super.noSuchMethod(
        Invocation.method(
          #describeForError,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_1(
          this,
          Invocation.method(
            #describeForError,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_1(
          this,
          Invocation.method(
            #describeForError,
            [name],
          ),
        ),
      ) as _i3.DiagnosticsNode);
  @override
  void stop({bool? canceled = false}) => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
          {#canceled: canceled},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void scheduleTick({bool? rescheduling = false}) => super.noSuchMethod(
        Invocation.method(
          #scheduleTick,
          [],
          {#rescheduling: rescheduling},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void unscheduleTick() => super.noSuchMethod(
        Invocation.method(
          #unscheduleTick,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void absorbTicker(_i2.Ticker? originalTicker) => super.noSuchMethod(
        Invocation.method(
          #absorbTicker,
          [originalTicker],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}
