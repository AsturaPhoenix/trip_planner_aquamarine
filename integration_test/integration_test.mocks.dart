// Mocks generated by Mockito 5.3.3-dev from annotations
// in trip_planner_aquamarine/integration_test/integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i6;

import 'package:geolocator_platform_interface/src/enums/enums.dart' as _i12;
import 'package:geolocator_platform_interface/src/geolocator_platform_interface.dart'
    as _i11;
import 'package:geolocator_platform_interface/src/models/models.dart' as _i3;
import 'package:http/http.dart' as _i2;
import 'package:joda/time.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler_platform_interface/permission_handler_platform_interface.dart'
    as _i10;
import 'package:plugin_platform_interface/plugin_platform_interface.dart'
    as _i9;
import 'package:trip_planner_aquamarine/providers/trip_planner_client.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_1 extends _i1.SmartFake implements Uri {
  _FakeUri_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_3 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePosition_4 extends _i1.SmartFake implements _i3.Position {
  _FakePosition_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TripPlannerHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripPlannerHttpClient extends _i1.Mock
    implements _i4.TripPlannerHttpClient {
  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);
  @override
  Uri get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _FakeUri_1(
          this,
          Invocation.getter(#baseUrl),
        ),
        returnValueForMissingStub: _FakeUri_1(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as Uri);
  @override
  Uri get datapointsUrl => (super.noSuchMethod(
        Invocation.getter(#datapointsUrl),
        returnValue: _FakeUri_1(
          this,
          Invocation.getter(#datapointsUrl),
        ),
        returnValueForMissingStub: _FakeUri_1(
          this,
          Invocation.getter(#datapointsUrl),
        ),
      ) as Uri);
  @override
  Uri get tidesUrl => (super.noSuchMethod(
        Invocation.getter(#tidesUrl),
        returnValue: _FakeUri_1(
          this,
          Invocation.getter(#tidesUrl),
        ),
        returnValueForMissingStub: _FakeUri_1(
          this,
          Invocation.getter(#tidesUrl),
        ),
      ) as Uri);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<Map<_i4.StationId, _i4.Station>> getDatapoints() =>
      (super.noSuchMethod(
        Invocation.method(
          #getDatapoints,
          [],
        ),
        returnValue: _i5.Future<Map<_i4.StationId, _i4.Station>>.value(
            <_i4.StationId, _i4.Station>{}),
        returnValueForMissingStub:
            _i5.Future<Map<_i4.StationId, _i4.Station>>.value(
                <_i4.StationId, _i4.Station>{}),
      ) as _i5.Future<Map<_i4.StationId, _i4.Station>>);
  @override
  _i5.Future<_i6.Uint8List> getTideGraph(
    _i4.Station? station,
    int? days,
    int? width,
    int? height,
    _i7.Date? begin,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTideGraph,
          [
            station,
            days,
            width,
            height,
            begin,
          ],
        ),
        returnValue: _i5.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
        returnValueForMissingStub:
            _i5.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
      ) as _i5.Future<_i6.Uint8List>);
  @override
  _i5.Future<String> getTideCurrentStationDetails(_i4.Station? station) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTideCurrentStationDetails,
          [station],
        ),
        returnValue: _i5.Future<String>.value(''),
        returnValueForMissingStub: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  @override
  _i5.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);
  @override
  _i5.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i2.Response>);
  @override
  _i5.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<String>.value(''),
        returnValueForMissingStub: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  _i5.Future<_i6.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
        returnValueForMissingStub:
            _i5.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
      ) as _i5.Future<_i6.Uint8List>);
  @override
  _i5.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i5.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i5.Future<_i2.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PermissionHandlerPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionHandlerPlatform extends _i1.Mock
    with _i9.MockPlatformInterfaceMixin
    implements _i10.PermissionHandlerPlatform {
  @override
  _i5.Future<_i10.PermissionStatus> checkPermissionStatus(
          _i10.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPermissionStatus,
          [permission],
        ),
        returnValue: _i5.Future<_i10.PermissionStatus>.value(
            _i10.PermissionStatus.denied),
        returnValueForMissingStub: _i5.Future<_i10.PermissionStatus>.value(
            _i10.PermissionStatus.denied),
      ) as _i5.Future<_i10.PermissionStatus>);
  @override
  _i5.Future<_i10.ServiceStatus> checkServiceStatus(
          _i10.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkServiceStatus,
          [permission],
        ),
        returnValue:
            _i5.Future<_i10.ServiceStatus>.value(_i10.ServiceStatus.disabled),
        returnValueForMissingStub:
            _i5.Future<_i10.ServiceStatus>.value(_i10.ServiceStatus.disabled),
      ) as _i5.Future<_i10.ServiceStatus>);
  @override
  _i5.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<Map<_i10.Permission, _i10.PermissionStatus>> requestPermissions(
          List<_i10.Permission>? permissions) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPermissions,
          [permissions],
        ),
        returnValue:
            _i5.Future<Map<_i10.Permission, _i10.PermissionStatus>>.value(
                <_i10.Permission, _i10.PermissionStatus>{}),
        returnValueForMissingStub:
            _i5.Future<Map<_i10.Permission, _i10.PermissionStatus>>.value(
                <_i10.Permission, _i10.PermissionStatus>{}),
      ) as _i5.Future<Map<_i10.Permission, _i10.PermissionStatus>>);
  @override
  _i5.Future<bool> shouldShowRequestPermissionRationale(
          _i10.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #shouldShowRequestPermissionRationale,
          [permission],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [GeolocatorPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeolocatorPlatform extends _i1.Mock
    with _i9.MockPlatformInterfaceMixin
    implements _i11.GeolocatorPlatform {
  @override
  _i5.Future<_i12.LocationPermission> checkPermission() => (super.noSuchMethod(
        Invocation.method(
          #checkPermission,
          [],
        ),
        returnValue: _i5.Future<_i12.LocationPermission>.value(
            _i12.LocationPermission.denied),
        returnValueForMissingStub: _i5.Future<_i12.LocationPermission>.value(
            _i12.LocationPermission.denied),
      ) as _i5.Future<_i12.LocationPermission>);
  @override
  _i5.Future<_i12.LocationPermission> requestPermission() =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i5.Future<_i12.LocationPermission>.value(
            _i12.LocationPermission.denied),
        returnValueForMissingStub: _i5.Future<_i12.LocationPermission>.value(
            _i12.LocationPermission.denied),
      ) as _i5.Future<_i12.LocationPermission>);
  @override
  _i5.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<_i3.Position?> getLastKnownPosition(
          {bool? forceLocationManager = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLastKnownPosition,
          [],
          {#forceLocationManager: forceLocationManager},
        ),
        returnValue: _i5.Future<_i3.Position?>.value(),
        returnValueForMissingStub: _i5.Future<_i3.Position?>.value(),
      ) as _i5.Future<_i3.Position?>);
  @override
  _i5.Future<_i3.Position> getCurrentPosition(
          {_i3.LocationSettings? locationSettings}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
          {#locationSettings: locationSettings},
        ),
        returnValue: _i5.Future<_i3.Position>.value(_FakePosition_4(
          this,
          Invocation.method(
            #getCurrentPosition,
            [],
            {#locationSettings: locationSettings},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Position>.value(_FakePosition_4(
          this,
          Invocation.method(
            #getCurrentPosition,
            [],
            {#locationSettings: locationSettings},
          ),
        )),
      ) as _i5.Future<_i3.Position>);
  @override
  _i5.Stream<_i12.ServiceStatus> getServiceStatusStream() =>
      (super.noSuchMethod(
        Invocation.method(
          #getServiceStatusStream,
          [],
        ),
        returnValue: _i5.Stream<_i12.ServiceStatus>.empty(),
        returnValueForMissingStub: _i5.Stream<_i12.ServiceStatus>.empty(),
      ) as _i5.Stream<_i12.ServiceStatus>);
  @override
  _i5.Stream<_i3.Position> getPositionStream(
          {_i3.LocationSettings? locationSettings}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPositionStream,
          [],
          {#locationSettings: locationSettings},
        ),
        returnValue: _i5.Stream<_i3.Position>.empty(),
        returnValueForMissingStub: _i5.Stream<_i3.Position>.empty(),
      ) as _i5.Stream<_i3.Position>);
  @override
  _i5.Future<_i12.LocationAccuracyStatus> requestTemporaryFullAccuracy(
          {required String? purposeKey}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestTemporaryFullAccuracy,
          [],
          {#purposeKey: purposeKey},
        ),
        returnValue: _i5.Future<_i12.LocationAccuracyStatus>.value(
            _i12.LocationAccuracyStatus.reduced),
        returnValueForMissingStub:
            _i5.Future<_i12.LocationAccuracyStatus>.value(
                _i12.LocationAccuracyStatus.reduced),
      ) as _i5.Future<_i12.LocationAccuracyStatus>);
  @override
  _i5.Future<_i12.LocationAccuracyStatus> getLocationAccuracy() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationAccuracy,
          [],
        ),
        returnValue: _i5.Future<_i12.LocationAccuracyStatus>.value(
            _i12.LocationAccuracyStatus.reduced),
        returnValueForMissingStub:
            _i5.Future<_i12.LocationAccuracyStatus>.value(
                _i12.LocationAccuracyStatus.reduced),
      ) as _i5.Future<_i12.LocationAccuracyStatus>);
  @override
  _i5.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> openLocationSettings() => (super.noSuchMethod(
        Invocation.method(
          #openLocationSettings,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  double distanceBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #distanceBetween,
          [
            startLatitude,
            startLongitude,
            endLatitude,
            endLongitude,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
  @override
  double bearingBetween(
    double? startLatitude,
    double? startLongitude,
    double? endLatitude,
    double? endLongitude,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #bearingBetween,
          [
            startLatitude,
            startLongitude,
            endLatitude,
            endLongitude,
          ],
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}
