// Mocks generated by Mockito 5.4.2 from annotations
// in aquamarine_server/test/fetch_scheduler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:aquamarine_server/aquamarine_server.dart' as _i5;
import 'package:aquamarine_server/ofs_client.dart' as _i2;
import 'package:aquamarine_server/persistence/persistence.dart' as _i3;
import 'package:aquamarine_server/types.dart' as _i10;
import 'package:aquamarine_server_interface/quadtree.dart' as _i7;
import 'package:aquamarine_server_interface/types.dart' as _i6;
import 'package:aquamarine_util/async.dart' as _i4;
import 'package:latlng/latlng.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOfsClient_0 extends _i1.SmartFake implements _i2.OfsClient {
  _FakeOfsClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePersistence_1 extends _i1.SmartFake implements _i3.Persistence {
  _FakePersistence_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAsyncCache_2<K, V> extends _i1.SmartFake
    implements _i4.AsyncCache<K, V> {
  _FakeAsyncCache_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AquamarineServer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAquamarineServer extends _i1.Mock implements _i5.AquamarineServer {
  @override
  _i2.OfsClient get ofsClient => (super.noSuchMethod(
        Invocation.getter(#ofsClient),
        returnValue: _FakeOfsClient_0(
          this,
          Invocation.getter(#ofsClient),
        ),
        returnValueForMissingStub: _FakeOfsClient_0(
          this,
          Invocation.getter(#ofsClient),
        ),
      ) as _i2.OfsClient);
  @override
  _i3.Persistence get persistence => (super.noSuchMethod(
        Invocation.getter(#persistence),
        returnValue: _FakePersistence_1(
          this,
          Invocation.getter(#persistence),
        ),
        returnValueForMissingStub: _FakePersistence_1(
          this,
          Invocation.getter(#persistence),
        ),
      ) as _i3.Persistence);
  @override
  _i4.AsyncCache<_i6.Hex32, _i7.Quadtree<int>> get latlngCache =>
      (super.noSuchMethod(
        Invocation.getter(#latlngCache),
        returnValue: _FakeAsyncCache_2<_i6.Hex32, _i7.Quadtree<int>>(
          this,
          Invocation.getter(#latlngCache),
        ),
        returnValueForMissingStub:
            _FakeAsyncCache_2<_i6.Hex32, _i7.Quadtree<int>>(
          this,
          Invocation.getter(#latlngCache),
        ),
      ) as _i4.AsyncCache<_i6.Hex32, _i7.Quadtree<int>>);
  @override
  _i4.AsyncCache<_i6.HourUtc, _i5.FetchResult> get uvRefreshCache =>
      (super.noSuchMethod(
        Invocation.getter(#uvRefreshCache),
        returnValue: _FakeAsyncCache_2<_i6.HourUtc, _i5.FetchResult>(
          this,
          Invocation.getter(#uvRefreshCache),
        ),
        returnValueForMissingStub:
            _FakeAsyncCache_2<_i6.HourUtc, _i5.FetchResult>(
          this,
          Invocation.getter(#uvRefreshCache),
        ),
      ) as _i4.AsyncCache<_i6.HourUtc, _i5.FetchResult>);
  @override
  _i8.Future<_i8.Stream<List<int>>?> latlng(_i6.Hex32? hash) =>
      (super.noSuchMethod(
        Invocation.method(
          #latlng,
          [hash],
        ),
        returnValue: _i8.Future<_i8.Stream<List<int>>?>.value(),
        returnValueForMissingStub: _i8.Future<_i8.Stream<List<int>>?>.value(),
      ) as _i8.Future<_i8.Stream<List<int>>?>);
  @override
  _i8.Stream<_i5.UvResponseEntry> uv(
    _i6.HourUtc? begin,
    _i6.HourUtc? end,
    _i9.LatLngBounds? bounds, [
    double? resolution = 0.0,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #uv,
          [
            begin,
            end,
            bounds,
            resolution,
          ],
        ),
        returnValue: _i8.Stream<_i5.UvResponseEntry>.empty(),
        returnValueForMissingStub: _i8.Stream<_i5.UvResponseEntry>.empty(),
      ) as _i8.Stream<_i5.UvResponseEntry>);
  @override
  _i8.Future<void> ensureLatLngFetched(
    _i6.Hex32? hash,
    _i10.SimulationTime? representativeSample,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ensureLatLngFetched,
          [
            hash,
            representativeSample,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i5.FetchResult> refreshUv(
          Iterable<_i10.SimulationTime>? simulationTimes) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshUv,
          [simulationTimes],
        ),
        returnValue: _i8.Future<_i5.FetchResult>.value(_i5.FetchResult.success),
        returnValueForMissingStub:
            _i8.Future<_i5.FetchResult>.value(_i5.FetchResult.success),
      ) as _i8.Future<_i5.FetchResult>);
  @override
  _i8.Future<_i5.FetchResult> fetchSimulationRun(_i6.HourUtc? runTime) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchSimulationRun,
          [runTime],
        ),
        returnValue: _i8.Future<_i5.FetchResult>.value(_i5.FetchResult.success),
        returnValueForMissingStub:
            _i8.Future<_i5.FetchResult>.value(_i5.FetchResult.success),
      ) as _i8.Future<_i5.FetchResult>);
}
