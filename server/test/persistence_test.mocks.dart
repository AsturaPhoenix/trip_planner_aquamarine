// Mocks generated by Mockito 5.4.0 from annotations
// in aquamarine_server/test/persistence_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i3;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStdin_0 extends _i1.SmartFake implements _i2.Stdin {
  _FakeStdin_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStdout_1 extends _i1.SmartFake implements _i2.Stdout {
  _FakeStdout_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_2 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_3 extends _i1.SmartFake implements _i2.File {
  _FakeFile_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_4 extends _i1.SmartFake implements _i2.FileStat {
  _FakeFileStat_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntityType_5 extends _i1.SmartFake
    implements _i2.FileSystemEntityType {
  _FakeFileSystemEntityType_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLink_6 extends _i1.SmartFake implements _i2.Link {
  _FakeLink_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSocket_7 extends _i1.SmartFake implements _i2.Socket {
  _FakeSocket_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConnectionTask_8<S> extends _i1.SmartFake
    implements _i2.ConnectionTask<S> {
  _FakeConnectionTask_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeServerSocket_9 extends _i1.SmartFake implements _i2.ServerSocket {
  _FakeServerSocket_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_10 extends _i1.SmartFake implements Uri {
  _FakeUri_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_11 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandomAccessFile_12 extends _i1.SmartFake
    implements _i2.RandomAccessFile {
  _FakeRandomAccessFile_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSink_13 extends _i1.SmartFake implements _i2.IOSink {
  _FakeIOSink_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_14 extends _i1.SmartFake
    implements _i2.FileSystemEntity {
  _FakeFileSystemEntity_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEncoding_15 extends _i1.SmartFake implements _i3.Encoding {
  _FakeEncoding_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IOOverrides].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOOverrides extends _i1.Mock implements _i2.IOOverrides {
  @override
  _i2.Stdin get stdin => (super.noSuchMethod(
        Invocation.getter(#stdin),
        returnValue: _FakeStdin_0(
          this,
          Invocation.getter(#stdin),
        ),
        returnValueForMissingStub: _FakeStdin_0(
          this,
          Invocation.getter(#stdin),
        ),
      ) as _i2.Stdin);
  @override
  _i2.Stdout get stdout => (super.noSuchMethod(
        Invocation.getter(#stdout),
        returnValue: _FakeStdout_1(
          this,
          Invocation.getter(#stdout),
        ),
        returnValueForMissingStub: _FakeStdout_1(
          this,
          Invocation.getter(#stdout),
        ),
      ) as _i2.Stdout);
  @override
  _i2.Stdout get stderr => (super.noSuchMethod(
        Invocation.getter(#stderr),
        returnValue: _FakeStdout_1(
          this,
          Invocation.getter(#stderr),
        ),
        returnValueForMissingStub: _FakeStdout_1(
          this,
          Invocation.getter(#stderr),
        ),
      ) as _i2.Stdout);
  @override
  _i2.Directory createDirectory(String? path) => (super.noSuchMethod(
        Invocation.method(
          #createDirectory,
          [path],
        ),
        returnValue: _FakeDirectory_2(
          this,
          Invocation.method(
            #createDirectory,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeDirectory_2(
          this,
          Invocation.method(
            #createDirectory,
            [path],
          ),
        ),
      ) as _i2.Directory);
  @override
  _i2.Directory getCurrentDirectory() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentDirectory,
          [],
        ),
        returnValue: _FakeDirectory_2(
          this,
          Invocation.method(
            #getCurrentDirectory,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDirectory_2(
          this,
          Invocation.method(
            #getCurrentDirectory,
            [],
          ),
        ),
      ) as _i2.Directory);
  @override
  void setCurrentDirectory(String? path) => super.noSuchMethod(
        Invocation.method(
          #setCurrentDirectory,
          [path],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Directory getSystemTempDirectory() => (super.noSuchMethod(
        Invocation.method(
          #getSystemTempDirectory,
          [],
        ),
        returnValue: _FakeDirectory_2(
          this,
          Invocation.method(
            #getSystemTempDirectory,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDirectory_2(
          this,
          Invocation.method(
            #getSystemTempDirectory,
            [],
          ),
        ),
      ) as _i2.Directory);
  @override
  _i2.File createFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #createFile,
          [path],
        ),
        returnValue: _FakeFile_3(
          this,
          Invocation.method(
            #createFile,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeFile_3(
          this,
          Invocation.method(
            #createFile,
            [path],
          ),
        ),
      ) as _i2.File);
  @override
  _i4.Future<_i2.FileStat> stat(String? path) => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [path],
        ),
        returnValue: _i4.Future<_i2.FileStat>.value(_FakeFileStat_4(
          this,
          Invocation.method(
            #stat,
            [path],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.FileStat>.value(_FakeFileStat_4(
          this,
          Invocation.method(
            #stat,
            [path],
          ),
        )),
      ) as _i4.Future<_i2.FileStat>);
  @override
  _i2.FileStat statSync(String? path) => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [path],
        ),
        returnValue: _FakeFileStat_4(
          this,
          Invocation.method(
            #statSync,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeFileStat_4(
          this,
          Invocation.method(
            #statSync,
            [path],
          ),
        ),
      ) as _i2.FileStat);
  @override
  _i4.Future<bool> fseIdentical(
    String? path1,
    String? path2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fseIdentical,
          [
            path1,
            path2,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  bool fseIdenticalSync(
    String? path1,
    String? path2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fseIdenticalSync,
          [
            path1,
            path2,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<_i2.FileSystemEntityType> fseGetType(
    String? path,
    bool? followLinks,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fseGetType,
          [
            path,
            followLinks,
          ],
        ),
        returnValue: _i4.Future<_i2.FileSystemEntityType>.value(
            _FakeFileSystemEntityType_5(
          this,
          Invocation.method(
            #fseGetType,
            [
              path,
              followLinks,
            ],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.FileSystemEntityType>.value(
            _FakeFileSystemEntityType_5(
          this,
          Invocation.method(
            #fseGetType,
            [
              path,
              followLinks,
            ],
          ),
        )),
      ) as _i4.Future<_i2.FileSystemEntityType>);
  @override
  _i2.FileSystemEntityType fseGetTypeSync(
    String? path,
    bool? followLinks,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fseGetTypeSync,
          [
            path,
            followLinks,
          ],
        ),
        returnValue: _FakeFileSystemEntityType_5(
          this,
          Invocation.method(
            #fseGetTypeSync,
            [
              path,
              followLinks,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeFileSystemEntityType_5(
          this,
          Invocation.method(
            #fseGetTypeSync,
            [
              path,
              followLinks,
            ],
          ),
        ),
      ) as _i2.FileSystemEntityType);
  @override
  _i4.Stream<_i2.FileSystemEvent> fsWatch(
    String? path,
    int? events,
    bool? recursive,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fsWatch,
          [
            path,
            events,
            recursive,
          ],
        ),
        returnValue: _i4.Stream<_i2.FileSystemEvent>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.FileSystemEvent>.empty(),
      ) as _i4.Stream<_i2.FileSystemEvent>);
  @override
  bool fsWatchIsSupported() => (super.noSuchMethod(
        Invocation.method(
          #fsWatchIsSupported,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Link createLink(String? path) => (super.noSuchMethod(
        Invocation.method(
          #createLink,
          [path],
        ),
        returnValue: _FakeLink_6(
          this,
          Invocation.method(
            #createLink,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeLink_6(
          this,
          Invocation.method(
            #createLink,
            [path],
          ),
        ),
      ) as _i2.Link);
  @override
  _i4.Future<_i2.Socket> socketConnect(
    dynamic host,
    int? port, {
    dynamic sourceAddress,
    int? sourcePort = 0,
    Duration? timeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #socketConnect,
          [
            host,
            port,
          ],
          {
            #sourceAddress: sourceAddress,
            #sourcePort: sourcePort,
            #timeout: timeout,
          },
        ),
        returnValue: _i4.Future<_i2.Socket>.value(_FakeSocket_7(
          this,
          Invocation.method(
            #socketConnect,
            [
              host,
              port,
            ],
            {
              #sourceAddress: sourceAddress,
              #sourcePort: sourcePort,
              #timeout: timeout,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Socket>.value(_FakeSocket_7(
          this,
          Invocation.method(
            #socketConnect,
            [
              host,
              port,
            ],
            {
              #sourceAddress: sourceAddress,
              #sourcePort: sourcePort,
              #timeout: timeout,
            },
          ),
        )),
      ) as _i4.Future<_i2.Socket>);
  @override
  _i4.Future<_i2.ConnectionTask<_i2.Socket>> socketStartConnect(
    dynamic host,
    int? port, {
    dynamic sourceAddress,
    int? sourcePort = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #socketStartConnect,
          [
            host,
            port,
          ],
          {
            #sourceAddress: sourceAddress,
            #sourcePort: sourcePort,
          },
        ),
        returnValue: _i4.Future<_i2.ConnectionTask<_i2.Socket>>.value(
            _FakeConnectionTask_8<_i2.Socket>(
          this,
          Invocation.method(
            #socketStartConnect,
            [
              host,
              port,
            ],
            {
              #sourceAddress: sourceAddress,
              #sourcePort: sourcePort,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.ConnectionTask<_i2.Socket>>.value(
                _FakeConnectionTask_8<_i2.Socket>(
          this,
          Invocation.method(
            #socketStartConnect,
            [
              host,
              port,
            ],
            {
              #sourceAddress: sourceAddress,
              #sourcePort: sourcePort,
            },
          ),
        )),
      ) as _i4.Future<_i2.ConnectionTask<_i2.Socket>>);
  @override
  _i4.Future<_i2.ServerSocket> serverSocketBind(
    dynamic address,
    int? port, {
    int? backlog = 0,
    bool? v6Only = false,
    bool? shared = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #serverSocketBind,
          [
            address,
            port,
          ],
          {
            #backlog: backlog,
            #v6Only: v6Only,
            #shared: shared,
          },
        ),
        returnValue: _i4.Future<_i2.ServerSocket>.value(_FakeServerSocket_9(
          this,
          Invocation.method(
            #serverSocketBind,
            [
              address,
              port,
            ],
            {
              #backlog: backlog,
              #v6Only: v6Only,
              #shared: shared,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.ServerSocket>.value(_FakeServerSocket_9(
          this,
          Invocation.method(
            #serverSocketBind,
            [
              address,
              port,
            ],
            {
              #backlog: backlog,
              #v6Only: v6Only,
              #shared: shared,
            },
          ),
        )),
      ) as _i4.Future<_i2.ServerSocket>);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i2.File {
  @override
  _i2.File get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeFile_3(
          this,
          Invocation.getter(#absolute),
        ),
        returnValueForMissingStub: _FakeFile_3(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i2.File);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_10(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_10(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);
  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_2(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeDirectory_2(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i2.Directory);
  @override
  _i4.Future<_i2.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValue: _i4.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
      ) as _i4.Future<_i2.File>);
  @override
  void createSync({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<_i2.File> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i4.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i4.Future<_i2.File>);
  @override
  _i2.File renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeFile_3(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
        returnValueForMissingStub: _FakeFile_3(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i2.File);
  @override
  _i4.Future<_i2.File> copy(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [newPath],
        ),
        returnValue: _i4.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
      ) as _i4.Future<_i2.File>);
  @override
  _i2.File copySync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copySync,
          [newPath],
        ),
        returnValue: _FakeFile_3(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
        returnValueForMissingStub: _FakeFile_3(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
      ) as _i2.File);
  @override
  _i4.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  int lengthSync() => (super.noSuchMethod(
        Invocation.method(
          #lengthSync,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i4.Future<DateTime> lastAccessed() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessed,
          [],
        ),
        returnValue: _i4.Future<DateTime>.value(_FakeDateTime_11(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<DateTime>.value(_FakeDateTime_11(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
      ) as _i4.Future<DateTime>);
  @override
  DateTime lastAccessedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessedSync,
          [],
        ),
        returnValue: _FakeDateTime_11(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_11(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
      ) as DateTime);
  @override
  _i4.Future<dynamic> setLastAccessed(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastAccessed,
          [time],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastAccessedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i4.Future<DateTime>.value(_FakeDateTime_11(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<DateTime>.value(_FakeDateTime_11(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i4.Future<DateTime>);
  @override
  DateTime lastModifiedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastModifiedSync,
          [],
        ),
        returnValue: _FakeDateTime_11(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeDateTime_11(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
      ) as DateTime);
  @override
  _i4.Future<dynamic> setLastModified(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastModified,
          [time],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastModifiedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<_i2.RandomAccessFile> open(
          {_i2.FileMode? mode = _i2.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
          {#mode: mode},
        ),
        returnValue:
            _i4.Future<_i2.RandomAccessFile>.value(_FakeRandomAccessFile_12(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.RandomAccessFile>.value(_FakeRandomAccessFile_12(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i4.Future<_i2.RandomAccessFile>);
  @override
  _i2.RandomAccessFile openSync({_i2.FileMode? mode = _i2.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #openSync,
          [],
          {#mode: mode},
        ),
        returnValue: _FakeRandomAccessFile_12(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
        returnValueForMissingStub: _FakeRandomAccessFile_12(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
      ) as _i2.RandomAccessFile);
  @override
  _i4.Stream<List<int>> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i4.Stream<List<int>>.empty(),
        returnValueForMissingStub: _i4.Stream<List<int>>.empty(),
      ) as _i4.Stream<List<int>>);
  @override
  _i2.IOSink openWrite({
    _i2.FileMode? mode = _i2.FileMode.write,
    _i3.Encoding? encoding = const _i3.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openWrite,
          [],
          {
            #mode: mode,
            #encoding: encoding,
          },
        ),
        returnValue: _FakeIOSink_13(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
        returnValueForMissingStub: _FakeIOSink_13(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
      ) as _i2.IOSink);
  @override
  _i4.Future<_i5.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i4.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
        returnValueForMissingStub:
            _i4.Future<_i5.Uint8List>.value(_i5.Uint8List(0)),
      ) as _i4.Future<_i5.Uint8List>);
  @override
  _i5.Uint8List readAsBytesSync() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytesSync,
          [],
        ),
        returnValue: _i5.Uint8List(0),
        returnValueForMissingStub: _i5.Uint8List(0),
      ) as _i5.Uint8List);
  @override
  _i4.Future<String> readAsString(
          {_i3.Encoding? encoding = const _i3.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  String readAsStringSync({_i3.Encoding? encoding = const _i3.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsStringSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i4.Future<List<String>> readAsLines(
          {_i3.Encoding? encoding = const _i3.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLines,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);
  @override
  List<String> readAsLinesSync(
          {_i3.Encoding? encoding = const _i3.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLinesSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  _i4.Future<_i2.File> writeAsBytes(
    List<int>? bytes, {
    _i2.FileMode? mode = _i2.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsBytes,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValue: _i4.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
      ) as _i4.Future<_i2.File>);
  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i2.FileMode? mode = _i2.FileMode.write,
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsBytesSync,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<_i2.File> writeAsString(
    String? contents, {
    _i2.FileMode? mode = _i2.FileMode.write,
    _i3.Encoding? encoding = const _i3.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsString,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValue: _i4.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.File>.value(_FakeFile_3(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
      ) as _i4.Future<_i2.File>);
  @override
  void writeAsStringSync(
    String? contents, {
    _i2.FileMode? mode = _i2.FileMode.write,
    _i3.Encoding? encoding = const _i3.Utf8Codec(),
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsStringSync,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i4.Future<_i2.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i4.Future<_i2.FileStat>.value(_FakeFileStat_4(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.FileStat>.value(_FakeFileStat_4(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i4.Future<_i2.FileStat>);
  @override
  _i2.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_4(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeFileStat_4(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i2.FileStat);
  @override
  _i4.Future<_i2.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i4.Future<_i2.FileSystemEntity>.value(_FakeFileSystemEntity_14(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.FileSystemEntity>.value(_FakeFileSystemEntity_14(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i4.Future<_i2.FileSystemEntity>);
  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Stream<_i2.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i4.Stream<_i2.FileSystemEvent>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.FileSystemEvent>.empty(),
      ) as _i4.Stream<_i2.FileSystemEvent>);
}

/// A class which mocks [IOSink].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOSink extends _i1.Mock implements _i2.IOSink {
  @override
  _i3.Encoding get encoding => (super.noSuchMethod(
        Invocation.getter(#encoding),
        returnValue: _FakeEncoding_15(
          this,
          Invocation.getter(#encoding),
        ),
        returnValueForMissingStub: _FakeEncoding_15(
          this,
          Invocation.getter(#encoding),
        ),
      ) as _i3.Encoding);
  @override
  set encoding(_i3.Encoding? _encoding) => super.noSuchMethod(
        Invocation.setter(
          #encoding,
          _encoding,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<dynamic> get done => (super.noSuchMethod(
        Invocation.getter(#done),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  void add(List<int>? data) => super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void write(Object? object) => super.noSuchMethod(
        Invocation.method(
          #write,
          [object],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void writeAll(
    Iterable<dynamic>? objects, [
    String? separator = r'',
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAll,
          [
            objects,
            separator,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void writeln([Object? object = r'']) => super.noSuchMethod(
        Invocation.method(
          #writeln,
          [object],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void writeCharCode(int? charCode) => super.noSuchMethod(
        Invocation.method(
          #writeCharCode,
          [charCode],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Future<dynamic> addStream(_i4.Stream<List<int>>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStream,
          [stream],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}
